# -*- coding: utf-8 -*-
"""NYS

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10tyfRwypHQKrkNylRpj3cUOid9VQI6I2
"""
import fitz
import os
import pandas as pd
import re
from tqdm import tqdm

pdf_folder = r"C:\Users\Hp\Desktop\ACCIDENTS"
data_rows = []

def extract_case_details(text):
    # Normalize the text
    text = text.replace('\n', ' ').replace('  ', ' ')

    # Extract fields using regular expressions or keyword anchors
    title = re.search(r'Title:\s*(.*?)\.', text)
    location = re.search(r'Location:\s*(.*?)\.', text)
    date = re.search(r'Dt\.:\s*(\d{2}/\d{2}/\d{4})', text)
    incident_type = re.search(r'Title:\s*(.*)', text)  # Often embedded in title like "Explosion in furnace"

    # Summary extraction from ‚ÄúBRIEF OF INCIDENT‚Äù to ‚ÄúOBSERVATIONS / LAPSES‚Äù
    summary = re.search(r'BRIEF OF INCIDENT:(.*?)OBSERVATIONS\s*/\s*LAPSES', text, re.IGNORECASE)

    # Observations / lapses section
    observations = re.search(r'OBSERVATIONS\s*/\s*LAPSES(.*?)CONCLUSION\s*/\s*ROOT CAUSE', text, re.IGNORECASE)

    # Root cause section
    root_cause = re.search(r'CONCLUSION\s*/\s*ROOT CAUSE(.*?)RECOMMENDATIONS', text, re.IGNORECASE)

    # Recommendations
    recommendations = re.search(r'RECOMMENDATIONS(.*?)\*{5,}', text, re.IGNORECASE)

    return {
        'Title': title.group(1).strip() if title else '',
        'Incident Type': incident_type.group(1).strip() if incident_type else '',
        'Location': location.group(1).strip() if location else '',
        'Date': date.group(1).strip() if date else '',
        'Summary': summary.group(1).strip() if summary else '',
        'Observations': observations.group(1).strip() if observations else '',
        'Root Cause': root_cause.group(1).strip() if root_cause else '',
        'Recommendations': recommendations.group(1).strip() if recommendations else '',
    }

# Process each PDF
for filename in tqdm(os.listdir(pdf_folder)):
    if filename.endswith('.pdf'):
        file_path = os.path.join(pdf_folder, filename)
        doc = fitz.open(file_path)

        full_text = ""
        for page in doc:
            full_text += page.get_text()

        details = extract_case_details(full_text)
        details['File Name'] = filename
        data_rows.append(details)

# Save as DataFrame
df = pd.DataFrame(data_rows)
df.to_csv('oisd_case_studies_new.csv', index=False)
print(" CSV created: oisd_case_studies_new.csv")

from sentence_transformers import SentenceTransformer
import faiss
import numpy as np
import pandas as pd
import streamlit as st

# Clean and fill missing values to avoid key errors
df.fillna("N/A", inplace=True)

# Combine summary + root cause for embedding
model = SentenceTransformer('all-MiniLM-L6-v2')
texts = (df['Summary'] + ' ' + df['Root Cause']).tolist()
embeddings = model.encode(texts, show_progress_bar=True)

# Create FAISS index
dimension = embeddings[0].shape[0]
index = faiss.IndexFlatL2(dimension)
index.add(np.array(embeddings))

# Store metadata for later use
metadata = df[['Title', 'Summary', 'Root Cause', 'Date']].to_dict(orient='records')

# Define risk keywords and their weights
risk_keywords = {
    "explosion": 10,
    "fire": 8,
    "corrosion": 6,
    "valve failure": 7,
    "manual override": 7,
    "bypass interlock": 9,
    "leak": 6,
    "LPG": 9,
    "instrument error": 7,
    "oxygen deficiency": 9
}

def calculate_risk_score(query):
    score = 0
    for k, v in risk_keywords.items():
        if k in query.lower():
            score += v
    return min(10, score)

# Streamlit UI
st.title("üö® Accident Query & Risk Evaluation System")

query = st.text_input("üîç Enter scenario or keyword (e.g., 'valve failure'):")

if query:
    st.write("## Top 3 Similar Accidents:")
    query_vec = model.encode([query])
    D, I = index.search(query_vec, k=3)

    for idx in I[0]:
        if 0 <= idx < len(metadata):
            accident = metadata[idx]
            st.subheader(accident['Title'])
            st.write("üìÖ **Date:**", accident['Date'])
            st.write("üßæ **Summary:**", accident['Summary'])
            st.write("‚ö†Ô∏è **Root Cause:**", accident['Root Cause'])
        else:
            st.warning(f"‚ö†Ô∏è Metadata index out of range: {idx}")

    score = calculate_risk_score(query)
    st.markdown(f"### üî• Risk Score: **{score}/10**")
    if score >= 7:
        st.error("Recommendation: Immediate review or shutdown!")
